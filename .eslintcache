[{"D:\\prod\\calc\\src\\index.js":"1","D:\\prod\\calc\\src\\reportWebVitals.js":"2","D:\\prod\\calc\\src\\App.js":"3","D:\\prod\\calc\\src\\Components\\Calculator.jsx":"4","D:\\prod\\calc\\src\\Components\\Button.jsx":"5","D:\\prod\\calc\\src\\Components\\Input.jsx":"6"},{"size":500,"mtime":1606507744387,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":165,"mtime":1606244545597,"results":"10","hashOfConfig":"8"},{"size":3917,"mtime":1606507650671,"results":"11","hashOfConfig":"8"},{"size":874,"mtime":1606724262840,"results":"12","hashOfConfig":"8"},{"size":340,"mtime":1606483586771,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1hv85p2",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\prod\\calc\\src\\index.js",[],["30","31"],"D:\\prod\\calc\\src\\reportWebVitals.js",[],["32","33"],"D:\\prod\\calc\\src\\App.js",[],["34","35"],"D:\\prod\\calc\\src\\Components\\Calculator.jsx",["36","37"],"import React, { useState } from \"react\";\r\nimport Button from \"./Button\";\r\nimport Input from \"./Input\";\r\nimport \"../Styles/Calculator.css\";\r\n\r\nconst MAX_DIGITS = 11;\r\nconst MAX_DIGITS_WHOLE = 27;\r\nconst buttons = [\r\n  \"AC\",\r\n  \"+/-\",\r\n  \"%\",\r\n  \"/\",\r\n  \"7\",\r\n  \"8\",\r\n  \"9\",\r\n  \"\\u204E\",\r\n  \"4\",\r\n  \"5\",\r\n  \"6\",\r\n  \"-\",\r\n  \"1\",\r\n  \"2\",\r\n  \"3\",\r\n  \"+\",\r\n  \"0\",\r\n  \".\",\r\n  \"=\",\r\n];\r\n\r\nlet currOperator = '';\r\nlet result = 0;\r\nlet calculated = false;\r\nlet fraction = false;\r\n\r\nexport default function Calculator(props) {\r\n  let [operand, setOperand] = useState('0');\r\n  let [mathExpr, setMathExpr] = useState('');\r\n  let [showResult, setShowResult] = useState(true);\r\n\r\n  function shortenNum(num) {\r\n    let numStr = num.toString();\r\n    let [int, fraction] = numStr.split(\".\");\r\n    let resultStr = \"\",\r\n      result;\r\n    if (int.length >= MAX_DIGITS - 1 || numStr.search(\"e\") !== -1) {\r\n      result = parseFloat(num).toExponential(5);\r\n    } else if (int.length < MAX_DIGITS - 1 && fraction) {\r\n      resultStr += int + \".\" + fraction.slice(0, MAX_DIGITS - int.length - 2);\r\n      result = parseFloat(resultStr);\r\n    } else {\r\n      result = num;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function handleButtonClick(e, value) {\r\n    if (value === \"AC\") {\r\n      operand = '0';\r\n      result = 0;\r\n      mathExpr = \"\";\r\n      currOperator = \"\";\r\n      showResult = true;\r\n      fraction = false;\r\n      calculated = false;\r\n    }\r\n\r\n    if (value === \"+/-\") operand = `${-parseFloat(operand)}`;\r\n    else if (/[-/+\\u204E%]/.test(value)) {\r\n      if (value === \"\\u204E\") value = \"*\";\r\n      if (value === '%') { \r\n        operand = result * parseFloat(operand) / 100;\r\n        value = currOperator;\r\n      }\r\n      if (calculated) {\r\n        calculated = false;\r\n        mathExpr = `${result} ${value}`;\r\n      } else if (!showResult || mathExpr === \"\") {\r\n        if (mathExpr) mathExpr += \" \";\r\n        mathExpr += `${operand} ${value}`;\r\n        result = shortenNum(\r\n          currOperator\r\n            ? eval(result + currOperator + operand)\r\n            : operand\r\n        );\r\n        showResult = true;\r\n      }\r\n      mathExpr = mathExpr.slice(0, mathExpr.length - 1) + value;\r\n      currOperator = value;\r\n      fraction = false;\r\n    }\r\n\r\n    if (value === \"=\") {\r\n      fraction = false;\r\n      calculated = true;\r\n      mathExpr = \"\";\r\n      result = shortenNum(\r\n        currOperator\r\n          ? eval(result + currOperator + operand)\r\n          : operand\r\n      );\r\n      showResult = true;\r\n    }\r\n\r\n    if(value === '.' && !showResult) {\r\n      fraction = true;\r\n      operand += '.';\r\n    }\r\n\r\n    if (/[0-9]/.test(value)) {\r\n      if (showResult) {\r\n        operand = '0';\r\n        showResult = false;\r\n      }\r\n      if(fraction && operand.indexOf('.') === -1) {\r\n        operand += '.';\r\n      }\r\n      operand = operand === '0' ? value : operand + value;\r\n      operand = operand.slice(0, MAX_DIGITS);\r\n    }\r\n\r\n    // slice if need be to fit digits in the upper input field\r\n    const minSliceId = Math.max(mathExpr.length - MAX_DIGITS_WHOLE, 0);\r\n    const sliceFirst = minSliceId > 0;\r\n    const sliceSecond = !/ [0-9]/.test(\r\n      mathExpr[minSliceId - 1] + mathExpr[minSliceId]\r\n    );\r\n    if (sliceFirst) mathExpr = mathExpr.slice(minSliceId);\r\n    if (sliceFirst && sliceSecond) {\r\n      const finSliceId = Math.max(mathExpr.search(/ [0-9]/), 0);\r\n      mathExpr = mathExpr.slice(finSliceId);\r\n    }\r\n\r\n    setOperand(operand);\r\n    setMathExpr(mathExpr);\r\n    setShowResult(showResult);\r\n  }\r\n\r\n    return (\r\n      <div className=\"calculator\">\r\n        <Input\r\n          operand={operand}\r\n          result={result}\r\n          mathExpr={mathExpr}\r\n          showResult={showResult}\r\n        />\r\n        <div className=\"buttons\">\r\n          {buttons.map((value) => (\r\n            <Button value={value} handleClick={handleButtonClick} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n","D:\\prod\\calc\\src\\Components\\Button.jsx",[],"D:\\prod\\calc\\src\\Components\\Input.jsx",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"38","replacedBy":"42"},{"ruleId":"40","replacedBy":"43"},{"ruleId":"38","replacedBy":"44"},{"ruleId":"40","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":82,"column":15,"nodeType":"48","messageId":"49","endLine":82,"endColumn":19},{"ruleId":"46","severity":1,"message":"47","line":98,"column":13,"nodeType":"48","messageId":"49","endLine":98,"endColumn":17},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],["50"],["51"],["50"],["51"],"no-eval","eval can be harmful.","CallExpression","unexpected","no-global-assign","no-unsafe-negation"]