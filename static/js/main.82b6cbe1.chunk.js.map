{"version":3,"sources":["Components/Calculator.jsx","Components/Button.jsx","Components/Input.jsx","App.js","reportWebVitals.js","index.js"],"names":["MAX_DIGITS","MAX_DIGITS_WHOLE","Calculator","props","handleButtonClick","bind","state","operand","mathExpr","showResult","currOperator","result","calculated","fraction","num","numStr","toString","split","int","resultStr","length","search","parseFloat","toExponential","slice","e","value","this","test","shortenNum","eval","indexOf","minSliceId","Math","max","sliceFirst","sliceSecond","finSliceId","setState","className","map","handleClick","Component","Button","spansTwo","onClick","Input","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82b6cbe1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Button from \"./Button\";\r\nimport Input from \"./Input\";\r\nimport \"../Styles/Calculator.css\";\r\n\r\nconst MAX_DIGITS = 12;\r\nconst MAX_DIGITS_WHOLE = 27;\r\n\r\nexport default class Calculator extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleButtonClick = this.handleButtonClick.bind(this);\r\n    this.state = {\r\n      operand: '0',\r\n      mathExpr: \"\",\r\n      showResult: true,\r\n    };\r\n    this.currOperator = \"\";\r\n    this.result = 0;\r\n    this.calculated = false;\r\n    this.fraction = false\r\n  }\r\n\r\n  shortenNum(num) {\r\n    let numStr = num.toString();\r\n    let [int, fraction] = numStr.split(\".\");\r\n    let resultStr = \"\",\r\n      result;\r\n    if (int.length >= MAX_DIGITS - 1 || numStr.search(\"e\") !== -1) {\r\n      result = parseFloat(num).toExponential(5);\r\n    } else if (int.length < MAX_DIGITS - 1 && fraction) {\r\n      resultStr += int + \".\" + fraction.slice(0, MAX_DIGITS - int.length - 2);\r\n      result = parseFloat(resultStr);\r\n    } else {\r\n      result = num;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  handleButtonClick(e, value) {\r\n    let { operand, mathExpr, showResult } = this.state;\r\n\r\n    if (value === \"AC\") {\r\n      operand = '0';\r\n      this.result = 0;\r\n      mathExpr = \"\";\r\n      this.currOperator = \"\";\r\n      showResult = true;\r\n      this.fraction = false;\r\n      this.calculated = false;\r\n    }\r\n\r\n    if (value === \"+/-\") operand = `${-parseFloat(operand)}`;\r\n    else if (/[-/+\\u204E%]/.test(value)) {\r\n      if (value === \"\\u204E\") value = \"*\";\r\n      if (value === '%') { \r\n        operand = this.result * parseFloat(operand) / 100;\r\n        value = this.currOperator;\r\n      }\r\n      if (this.calculated) {\r\n        this.calculated = false;\r\n        mathExpr = `${this.result} ${value}`;\r\n      } else if (!showResult || mathExpr === \"\") {\r\n        if (mathExpr) mathExpr += \" \";\r\n        mathExpr += `${operand} ${value}`;\r\n        this.result = this.shortenNum(\r\n          this.currOperator\r\n            ? eval(this.result + this.currOperator + operand)\r\n            : operand\r\n        );\r\n        showResult = true;\r\n      }\r\n      mathExpr = mathExpr.slice(0, mathExpr.length - 1) + value;\r\n      this.currOperator = value;\r\n      this.fraction = false;\r\n    }\r\n\r\n    if (value === \"=\") {\r\n      this.fraction = false;\r\n      this.calculated = true;\r\n      mathExpr = \"\";\r\n      this.result = this.shortenNum(\r\n        this.currOperator\r\n          ? eval(this.result + this.currOperator + operand)\r\n          : operand\r\n      );\r\n      showResult = true;\r\n    }\r\n\r\n    if(value === '.' && !showResult) {\r\n      this.fraction = true;\r\n      operand += '.';\r\n    }\r\n\r\n    if (/[0-9]/.test(value)) {\r\n      if (showResult) {\r\n        operand = '0';\r\n        showResult = false;\r\n      }\r\n      if(this.fraction && operand.indexOf('.') === -1) {\r\n        operand += '.';\r\n      }\r\n      operand = operand === '0' ? value : operand + value;\r\n      operand = operand.slice(0, MAX_DIGITS);\r\n    }\r\n\r\n    // slice if need be to fit digits in the upper input field\r\n    const minSliceId = Math.max(mathExpr.length - MAX_DIGITS_WHOLE, 0);\r\n    const sliceFirst = minSliceId > 0;\r\n    const sliceSecond = !/ [0-9]/.test(\r\n      mathExpr[minSliceId - 1] + mathExpr[minSliceId]\r\n    );\r\n    if (sliceFirst) mathExpr = mathExpr.slice(minSliceId);\r\n    if (sliceFirst && sliceSecond) {\r\n      const finSliceId = Math.max(mathExpr.search(/ [0-9]/), 0);\r\n      mathExpr = mathExpr.slice(finSliceId);\r\n    }\r\n\r\n    this.setState({\r\n      operand: operand,\r\n      mathExpr: mathExpr,\r\n      showResult: showResult,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const buttons = [\r\n      \"AC\",\r\n      \"+/-\",\r\n      \"%\",\r\n      \"/\",\r\n      \"7\",\r\n      \"8\",\r\n      \"9\",\r\n      \"\\u204E\",\r\n      \"4\",\r\n      \"5\",\r\n      \"6\",\r\n      \"-\",\r\n      \"1\",\r\n      \"2\",\r\n      \"3\",\r\n      \"+\",\r\n      \"0\",\r\n      \".\",\r\n      \"=\",\r\n    ];\r\n    return (\r\n      <div className=\"calculator\">\r\n        <Input\r\n          operand={this.state.operand}\r\n          result={this.result}\r\n          mathExpr={this.state.mathExpr}\r\n          showResult={this.state.showResult}\r\n        />\r\n        <div className=\"buttons\">\r\n          {buttons.map((value) => (\r\n            <Button value={value} handleClick={this.handleButtonClick} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport '../Styles/Button.css';\r\n\r\nexport default class Button extends Component {\r\n  render() {\r\n    const spansTwo = this.props.value === '0' ? 'spans-two': '';\r\n    return (\r\n      <button className={`button ${spansTwo}`} onClick={e => this.props.handleClick(e, this.props.value)}>\r\n        {this.props.value}\r\n      </button>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport '../Styles/Input.css';\r\n\r\nexport default class Input extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"input\">\r\n        <div className=\"whole\">{this.props.mathExpr}</div>\r\n        <div className=\"current\">{this.props.showResult ? this.props.result : this.props.operand}</div>        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import Calculator from './Components/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}